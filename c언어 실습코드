///1주차 배열
/** 
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main(){
    int number[10];
    srand(time(NULL));
    for(int i=0; i<10; i++){
        number[i] = (rand() % 100)+1;
    }
    for(int i = 0; i<10; i++){
        printf("number = %d\n", number[i]);
    }
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 100
int main(){
int number [SIZE];
int total = 0;
int max, min;
float avg = 0.0;
srand (time (NULL));

for (int i = 0; i <SIZE; i++){
number[i] = (rand() % 100)+1;
}
number [1] = 1;
number [2] = 100;
// 가장 작은 값 1/ 가장 큰 값
for(int i = 0; i<SIZE; i++){
    printf("%3d \t", number[i]);
    if((i+1) % 10==0) printf("\n");
}
for(int i=0; i<SIZE; i++){
    total += number[i];
}
avg = (float) total/SIZE;

    max = number [0];
    min = number [0];

    for(int i=1; i<SIZE; i++){
        if(max < number[i]) max= number[i];
        if(min < number[i]) max = number[i];
}
    printf("avg = sf, max = sd, min =%d\n", avg, max, min);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 100
int main(){
    int number[SIZE];
    int most;
    int temp;
    srand(time(NULL));
    for(int i=0; i<SIZE; i++){
        number[i] = (rand() % 10000)+1;
    }
    for(int i=0; i<SIZE-1; i++){
        if(number[most]<number[i]) most = i;
    }
    temp = number[i];
    number[i]=number[most];
    number[most]=temp;
    }
    for(int i=0; i<SIZE; i++){
        printf("%5d\t", number[i]);
        if((i+1)%10==0) printf("\n");
}
//포인터
#include <stdint.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 100
void swap(int *a, int *b){
    int temp;
    temp = *a;
    *a=*b;
    *b=temp;
}
int main()
{
    int number[SIZE]={0};
    int most;
    int temp;
    srand(time(NULL));
    for(int i=0; i <SIZE-1; i++){
        number[i] = (rand() % 10000)+1;
    }
    for(int i=0; i<SIZE; i++){
        most=i;
        for(int j=i+1; j<SIZE; j++){
            if(number[most]<number[j]) most=j;
        }
        swap(&number[i], &number[most]);
    }
    for(int i=0; i<SIZE; i++){
        printf("%5d\t", number[i]);
        if((i+1)% 10 ==0) printf("\n");
    }
    return 0;
}

#include <stdio.h>
int main(){
    int i = 10;
    int* p;
    p = &i;

    printf("i = %d\n", i);
    printf("i = %d\n", p);
    printf("*p = %d\n", *p);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 100
void inputRandomArray(int* array, int size){
    for(int i=0; i< size; i++){
        *(array+i) = rand() % 100;
    }
}

void printArray(int* array, int size){
    for(int i=0; i<SIZE; i++){
        printf("%3d\t", array[i]);
        if((i+1)%10 == 0) printf("\n");
    }
}

int main()
{
    int number[SIZE];
    
    srand(time(NULL));
    inputRandomArray(number, SIZE);
    printArray(number, SIZE);
    

    return 0;
}
//문자열 4
#include <stdio.h>
int main()
{
    char message2[5] = {'a','b','c','d','\0'};
    char message[5] = {'a','b','c','\0'};
    
    printf("message = %s, message2 = %s", message, message2);

    return 0;
}

#include <stdio.h>
int main()
{
    int ch;
    char message[100];
    int i = 0;
    while((ch = getchar()) != '\n'){
        message[i++] = ch;
    }
    message[i] = '\0';
    printf("%s", message);
    return 0;
}

#include <stdio.h>
#include <string.h>
int main(){
	char src[100];
	char dest[100];
	int result;
	gets(src);
	gets(dest);
	
	result = strcmp(src, dest);
	printf("result = %d\n", result);
	return 0;
}

#include <stdio.h>
#include <string.h>
int main(){
	char input[200] = "";
	int count[20] = {0};
	int ch;
	int i = 0;
	
	while((ch = getchar()) != EOF){
		input[i++]=ch;
	}
	i=0;
	while(input[i] != '\0'){
		if(input[i] >= 'a' && input[i] <= 'z'){
			count[input[i] - 'a']++;
		}
		i++;
	}
	printf("입력한 문자열: %s\n", input);
	for(int i=0;i<26;i++) printf("%c의 출현 횟수 : %d\n", 'a'+i, count[i]);
	
	
	return 0;
}

//구조체 6
#include <stdio.h>
#include <math.h>

struct point{
	int x;
	int y;
};

double dist(struct point p1, struct point p2){
//	double distance;
	return sqrt(pow((p2.x - p1.x),2)+pow((p2.y-p1.y),2));
//	 distance;
}

int main(){
	struct point p1 = {10,20};
	struct point p2;
//	double d;
	
	p1.x = 20;
	p2.x = 30;
	p2.y = 40;
	
	printf("p1.x = %d, p1.y = %d\n",p1.x, p1.y);
	printf("p2.x = %d, p2.y = %d\n",p2.x, p2.y);

	printf("distance of p1, p2 = %lf",dist(p1,p2));
	
	return 0;
}


#include <stdio.h>
#include <math.h>

typedef struct point{
	int x;
	int y;
} POINT;

typedef struct{ //typedef 사용시 이름 없어도 됨
	POINT center; //원 중심 
	double radius;
} CIRCLE;

typedef struct rect{ //사각형 
	POINT lb;
	POINT rt;
}RECT;


double dist(POINT p1, struct point p2){
//	double distance;
	return sqrt(pow((p2.x - p1.x),2)+pow((p2.y-p1.y),2));
//	 distance;
}

int main(){
	struct point p1 = {10,20};
	struct point p2;
//	double d;
	
	p1.x = 20;
	p2.x = 30;
	p2.y = 40;
	
	printf("p1.x = %d, p1.y = %d\n",p1.x, p1.y);
	printf("p2.x = %d, p2.y = %d\n",p2.x, p2.y);

	printf("distance of p1, p2 = %lf",dist(p1,p2));
	
	return 0;
}



#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define SIZE 10
typedef struct point{
	int x;
	int y;
}POINT;

int main(){
	POINT point[SIZE] = {};
	POINT temp = {0,0};
	int least;
	
	srand(time(NULL));
	for(int i=0;i<SIZE; i++){
		point[i].x = rand() % 101;
		point[i].y = rand() % 101;
	}
	for(int i = 0; i<SIZE; i++){
		printf("point[%3d] : (%3d, %3d)\n", i point[i].x, point[i].y );
	}
	for(int i=0;i<SIZE-1;i++){
		least i;
		for(int j=i+1; j<SIZE; j++){
			if(point[least].x > point[j].x) least = j;
			else if(point[least].x == point[j].x && point[least].y > point[j].y);
				least = j;
		}
		temp = point[least];
		point[least] = point[i];
		point[i] = temp;
	}	
	printf("after sorting>>>>>>>>>>>\n");
	for(int i = 0; i<SIZE; i++){
		printf("point[%3d] : (%3d, %3d)\n", i, point[i].x, point[i].y);
	}
	return 0;
}


#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define SIZE 10
typedef struct point{
	int x;
	int y;
}POINT;

int main(){
	struct point p1 = {10,10};
	POINT p2 = {20,20};
	POINT* p3 = &p2;
	
	printf("p1.x = %d, p1.y = %d\n", p1.x, p1.y);
	printf("p2.x = %d, p2.y = %d\n", p2.x, p2.y);
	printf("p3->x = %d, p1->y = %d\n", p1->x, p1->y);
	
	p3 = &p1;
	printf("p3->x = %d, p3->y = %d\n", (*p3).x, (*p3).y);
	return 0;
}


#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define SIZE 100
typedef struct point{
	int x;
	int y;
}POINT;

void input_random_point(POINT* p, int size){
	srand((time(NULL)));
	for(int i=0;i<size;i++){
		(p+i)->x = rand() % 101;
		(p+i)->y = rand() % 101;
	}
}

void swap_point(POINT* p1, POINT* p2){
	POINT temp;
	temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}

void print_point_array(POINT* p, int size){
	for(int i = 0; i<size; i++){
		printf("p[%3d] : (%3d, %3d)\n",i , p[i].x, p[i].y);
	}
}

void selection_sort_point(POINT* poin, int size){

	for(int i=0; i<SIZE-1; i++){
		least = i;
		for(int j=i+1; j<SIZE; j++){
			if(point[least].x>point[j].x) least = j;
			else if(point[least].x == point[j].x && point[least].y > point[j].y);
		}
		swap_point(&point[i], point+least);
	}
}

int main(){
	POINT point[SIZE] = {0};
	POINT temp = {0,0};
	int least;
	print_point_array(point, SIZE);
	selection_sort_point(point, SIZE);
	print_point_array(point, SIZE);

	return 0;
}
//8주차 끝

///9주차
#include <stdio.h>

int getLine(char* line){ // 입력받기 함수
    int ch, i = 0;
    while((ch=getchar()) != '\n') line[i++] = ch;
    line[i] = '\0';
    return i;
}


int main()
{
    char input[100];
//    int ch, i = 0;
    FILE* fp; //파일 포인터 선언
    fp = fopen("output.txt","w"); //쓰기모드로 output.txt 열기
    if(fp == NULL){ //fp 가 NULL 일경우 에러 출력후 종료
        printf("error...");
        return 0;
    }
    
    for(int i = 0; i < 5; i++){
        getLine(input);//getLine 함수 호출
        fputs(input, fp); // (배열, 어떤파일 파일포인터)
        fputs("\n", fp);
    }
    
//    fputs("hello ooo", fp);
    
    
    fclose(fp);
    
    return 0;
}


#include <stdio.h>

int getLine(char* line){ // 입력받기 함수
    int ch, i = 0;
    while((ch=getchar()) != '\n') line[i++] = ch;
    line[i] = '\0';
    return i;
}


int main()
{
    char input[100];

    FILE* fp_src; //파일 포인터 선언
    FILE* fp_dest;
    
    fp_src = fopen("output.txt","r"); //쓰기모드로 output.txt 열기 
    //w 쓰기모드 , r 읽기모드 
    if(fp_src == NULL){ //fp 가 NULL 일경우 에러 출력후 종료
        printf("src error...");
        return 0;
    }
    fp_dest = fopen("output2.txt","w");
    if(fp_dest == NULL){ 
        printf("dest error...");
        return 0;
    }
    
    while(!feof(fp_src)){ //파일의 끝이 아닌동안
        fgets(input, 100, fp_src); // (받을 배열, 길이, 이파일에서)
        
        // 이곳에서  원하는 작업하기
        fputs(input, fp_dest);
        
        
    }
    
    
    
    fclose(fp_src);
    fclose(fp_dest);
    return 0;
}

#include <stdio.h>

int getLine(char* line){ // 입력받기 함수
    int ch, i = 0;
    while((ch=getchar()) != '\n') line[i++] = ch;
    line[i] = '\0';
    return i;
}


int main()
{
    int num1, num2;
    char input[100];

    FILE* fp_src; //파일 포인터 선언
    FILE* fp_dest;
    
    fp_src = fopen("output.txt","r"); //쓰기모드로 output.txt 열기 
    //w 쓰기모드 , r 읽기모드 
    if(fp_src == NULL){ //fp 가 NULL 일경우 에러 출력후 종료
        printf("src error...");
        return 0;
    }
    
    fp_dest = fopen("output3.txt","w");
    if(fp_dest == NULL){ 
        printf("dest error...");
        return 0;
    }
    
    while(!feof(fp_src)){ //파일의 끝이 아닌동안
        fscanf(fp_src, "%s %d %d\n", &input, &num1, &num2);
        fprintf(fp_dest, "%s %d %d\n", input, num1, num2);
        
    }
    
    
    
    fclose(fp_src);
    fclose(fp_dest);
    return 0;
}

//10주차 1-1
#include <stdio.h>
#define SIZE 100

int main()
{
    char input[SIZE];
    FILE* fp = NULL;
    
    if((fp = fopen("output.bin", "wb")) == NULL){
                                //w"b"<< 바이너리 b
        printf("error...");
        return 0;
    }
    gets(input);
    //fputs(input, fp);
    fwrite(input, strlen(input), 1, fp); //어디서, 크기, 몇번, 어디로
    
    fclose(fp);
    

    return 0;
}

//1-2
#include <stdio.h>
#define SIZE 100

int main()
{
    char input[SIZE];
    FILE* fp = NULL;
    int i = 0;
    
    if((fp = fopen("output.bin", "rb")) == NULL){
                                //w"b"<< 바이너리 b
        printf("error...");
        return 0;
    }
    
    while(!feof(fp)){
        fread(&input[i], sizeof(char), 1, fp);
        i++;
    }
    input[--i] = '\0';
    
    puts(input);
    
    fclose(fp);
    

    return 0;
}

#include <stdio.h>


int main()
{
    int array[100];
    FILE* fp;
    
    for(int i = 0; i< 100; i++){
        array[i] = i;
    }
    
    fp = fopen("array.bin", "wb");
    if(fp == NULL) return -1;
    
    fread(array, sizeof(int), 100, fp);
    
    for(int i=0; i< 100; i++){
        printf("%d", array[i]);
    }
    
    fclose(fp);

    return 0;
}

#include <stdlib.h>
#include <time.h>

typedef struct point{
    int x;
    int y;
}POINT;

POINT makePoint(void){
    POINT p;
    scanf("%d %d", &p.x, &p.y);
    return p;
}
void makeRandomPoints(POINT p[], int size){
    srand(time(NULL));
    for(int i = 0; i< size; i++){
        p[i].x = rand() % 100;
        p[i].y = rand() % 100;
    }
}
void printPoints(POINT p[], int size){
    for(int i=0; i<size; i++){
        printf("print[%d] = x : %d, y : %d\n", i, p[i].x, p[i].y);
    }
}
void saveFile(POINT p[], int size){
    FILE* fp;
    fp = fopen("struct.bin","wb");
    if(fp == NULL) exit(-1);
    fwrite(p, sizeof(POINT), size, fp);
    fclose(fp);
}
void loadFile(POINT p[], int size){
    FILE* fp;
    fp = fopen("struct.bin", "rb");
    if(fp == NULL) exit(-1);
    fread(p, sizeof(POINT), size, fp);
    fclose(fp);
}

int main()
{
    POINT p[10];
    makeRandomPoints(p,10);
    saveFile(p,10);
    
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct point{
    int x;
    int y;
}POINT;

POINT makePoint(void){
    POINT p;
    scanf("%d %d", &p.x, &p.y);
    return p;
}
void makeRandomPoints(POINT p[], int size){
    srand(time(NULL));
    for(int i = 0; i< size; i++){
        p[i].x = rand() % 100;
        p[i].y = rand() % 100;
    }
}
void printPoints(POINT p[], int size){
    for(int i=0; i<size; i++){
        printf("print[%d] = x : %d, y : %d\n", i, p[i].x, p[i].y);
    }
}
void saveFile(POINT p[], int size){
    FILE* fp;
    fp = fopen("struct.bin","wb");
    if(fp == NULL) exit(-1);
    fwrite(p, sizeof(POINT), size, fp);
    fclose(fp);
}
void loadFile(POINT p[], int size){
    FILE* fp;
    fp = fopen("struct.bin", "rb");
    if(fp == NULL) exit(-1);
    fread(p, sizeof(POINT), size, fp);
    fclose(fp);
}

int main()
{
    FILE* fp;
    POINT p[10];
    POINT p2;
    loadFile(p, 10);
    printPoints(p,10);
    
    int pi;
    
    fp = fopen("struct.bin","rb");
    if(fp == NULL) exit(-1);
    fseek(fp, sizeof(POINT)*3 ,SEEK_SET);
    pi = ftell(fp);
    printf("pi = %d\n", pi);
    fread(&p2, sizeof(POINT), 1, fp);
    printf("p2 -> x : %d, y : %d\n", p2.x, p2.y);
    fseek(fp, sizeof(POINT)*-2, SEEK_END);
    printf("p2 -> x : %d, y : %d\n", p2.x, p2.y);
    fread(&p2, sizeof(POINT), 1, fp);
    printf("p2 -> x : %d, y : %d\n", p2.x, p2.y);
    fclose(fp);
    
    
    return 0;
}
//11주차 1-3

#include <stdio.h>
#include <stdlib.h>

typedef struct point{
    int x;
    int y;
} POINT;
int inputMenu(void){
    int input;
    printf("메뉴얼 입력(1.구조체 만들기, 2.구조체 출려하기, -1. 종료) : ");
    scnaf("%d", &input);
    return input;
}
int main(){
    int menu;
    do{
        menu = inputMenu();
        if(menu == 1){
            //구조체 만들기    
        }else if(menu == 2){
            //구조체 출력하기
        }else if(menu == -1){
            printf("프로그램을 종료합니다 \n");
        }
    }while(menu > 0);
    return 0;
}
//1-4
#include <stdio.h>
#include <stdlib.h>
typedef struct point{
    int x;
    int y;
} POINT;
int inputMenu(void){
    int input;
    printf("메뉴얼 입력(1.구조체 만들기, 2.구조체 출려하기, -1. 종료) : ");
    scnaf("%d", &input);
    return input;
}
POINT* makePoint(void){
    POINT* p = (POINT*)malloc(sizeof(POINT));
            p-> x = rand() % 100;
            p -> y = rnad() % 100;
            return p;
}
void printPoint(POINT* p[], int size){
    for(int i = 0; i<size; i++)
    printf("x:%d, y:%d\n", p[i]->x, p[i]->y);
}
void freePoints(POINT* p[ ], int size){
    for(int i = 0; i<size; i++) free(p[i]);
}
int main(){
    int menu;
    int count = 0;
    POINT* points[100];
    do{
        menu = inputMenu();
        if(menu == 1){
            points[count] = makePoint();
            count++;
        }else if(menu == 2){
            //구조체 출력하기
            printPoint(points, count);
    
        }else if(menu == -1){
            freePoints(points, count);
            printf("프로그램 종료합니다 \n");
            for(int i = 0; i<count; i++)
            free(points[i]);
        }
    }while(menu > 0);
    return 0;
}
//1-5
#include <stdio.h>
#include <stdlib.h>
typedef struct point{
    int x;
    int y;
} POINT;
int inputMenu(void){
    int input;
    printf("만들기 , 2. 출력하기 3. 클리어, 4. 파일 저장, 5.파일로드, -1. 종료 :\n ");
    printf("1. point 만들기 \n");
    printf("2. point 출력하기 \n");
    printf("3. 화면 클리어 \n");
    printf("-1. 종료 \n");
    scnaf("%d", &input);
    return input;
}
POINT* akePoint(void){
    POINT* p = (POINT*)malloc(sizeof(POINT));
            p-> x = rand() % 100;
            p -> y = rnad() % 100;
            return p;
}
void printPoint(POINT* p[], int size){
    for(int i = 0; i<size; i++)
    printf("x:%d, y:%d\n", p[i]->x, p[i]->y);
}
void freePoints(POINT* p[ ], int size){
    for(int i = 0; i<size; i++) free(p[i]);
}
void saveFile(POINT* p[], int count ){
    FILE* fp;
    fp = fopen("points.bin", "ab");
    if(fp == NULL) return 0;
    for(int i=0; i<count; i++){
        fwrite(p[i], sizeof(POINT), 1, fp);
    fclose(fp);
    return 1; //잘되면 1 , 안 되면 -1

}
int loadFile(POINT* p[], int max){
    FILE* fp;
    int fsize, fCount;
    fp = fopen("points.bin", rb);
    if(fp == NULL) return 0;

    fsekk(fp, 0, SEEK_END);
    fSize=ftell(fp);
    fCoutn = fSize / sizeof(POINT);
    rewind(fp);

    for(int i=0; i<fCount; i++){
        if(i == max) break;
        p[i] = (POINT*)malloc(sizeof(POINT));
        fread(p[i],sizeof(POINT), 1, fp);

    }
    fclose(fp);
    return fCount;
}
int main(){
    int menu;
    int count = 0;
    POINT* points[100];
    do{
        menu = inputMenu();
        switch(menu){
            case 1:
                points[count]=makePoint();
                count++;
                break;
            case 2:
                printPoint(points, count);
                break;
            case 3:
                system("clear"); //화면 지워주는 함수 
                break;
            case 4: //file save
                if(!saveFile(points, count))  printf("file open error... \n");
                }else printf("file writing success.. \n")
                break;
            case 5: //load file
                count = loadFile(points, 100);
                break;
            case -1:
                freePoints(points, count);
                printf("프로그램 종료합니다 \n");
                break;
        }
    }while(menu > 0);

    return 0;
}**/
//11주차 끝


